// SYSTEM/PLUGINS
import path from "path";
import fs from "fs";
import browserSync from "browser-sync";

const CWD = path.join(process.cwd());

export const FILES_ROUTES = {
  ENTRY: {
    ASSETS: {
      WEBP: "dev/assets/images/webp",
      IMAGES: "dev/assets/images/**/*.*",
      ROOT: "dev/assets/**/*.*",
    },
    SVG: {
      ROOT: "dev/svg/icons/*.svg",
    },
    PUG: {
      ROOT: ["dev/pug/pages/*.pug", "!dev/pug/layout/*.pug", "!dev/pug/partials/_*.pug"],
    },
    JS: {
      ROOT: "dev/components/**/*.js",
    },
    SCSS: {
      MAIN: ["dev/scss/**/*.scss", "!dev/scss/**/_*.scss", "!dev/scss/libs*.scss"],
      LIBS: "dev/scss/libs*.scss",
    },
  },
  OUTPUT: {
    ASSETS: {
      ROOT: "prod/assets/",
    },
    SVG: {
      ROOT: "dev/svg",
    },
    PUG: {
      ROOT: "prod/",
    },
    JS: {
      ROOT: "prod/js",
    },
    SCSS: {
      ROOT: "prod/css",
    },
  },
};

/**
 *  Detects environment
 */
export const detectEnvironment = () => {
  const envMode = process.argv.includes("--production") ? "production" : "development";
  const isProductionEnvironment = envMode === "production";
  const isDevelopmentEnvironment = envMode === "development";

  isDevelopmentEnvironment ? setDevEnv() : setProdEnv();

  return [envMode, isProductionEnvironment, isDevelopmentEnvironment];
};

/**
 *  Manually sets the env. Needed for some PostCSS plugins.
 */
const setDevEnv = () => (process.env.NODE_ENV = "development");
const setProdEnv = () => (process.env.NODE_ENV = "production");

/**
 * Creates folder for analysis if it doesn't exists.
 *
 * @param list - CSS classes object generated by plugin.
 */
export const implementToFileSystem = (list) => {
  if (!fs.existsSync(CWD + "/analysis")) {
    fs.mkdirSync(CWD + "/analysis");
    createFileWithAnalysis(list);
  } else {
    createFileWithAnalysis(list);
  }
};

/**
 * Creates json file with analysis.
 *
 * @param list - CSS classes object generated by plugin.
 */
const createFileWithAnalysis = (list) => {
  const CSS_CLASSES_FILE_PATH = CWD + "/analysis/CSS_classes.json";

  if (fs.existsSync(CSS_CLASSES_FILE_PATH)) {
    try {
      fs.unlinkSync(CSS_CLASSES_FILE_PATH);
      createFileWithAnalysis(list);
    } catch (err) {
      console.error(err);
    }
  } else {
    fs.writeFileSync(CSS_CLASSES_FILE_PATH, JSON.stringify(list), function (err) {
      console.error(err);
    });
  }
};

/**
 * Shows the notification with text when bundler makes some operations.
 *
 * @param notificationText - string with desired text
 */
export const notification = (notificationText) => {
  if (detectEnvironment()[2]) {
    browserSync.notify(notificationText);
  }
};
